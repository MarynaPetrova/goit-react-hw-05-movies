{"version":3,"file":"static/js/737.b3aa10c7.chunk.js","mappings":"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","sources":["api.js","components/SearchBar.jsx","components/MovieList.jsx","components/Button.jsx","pages/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c4cadb3d157e55315d13da915983f2ee';\nconst LANG = 'language=en-US';\n\nexport const fetchMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchMoviesBySearch = async (query, page) => {\n  const response = await axios.get(\n    `/search/movie?query=${query}&${LANG}&page=${page}&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(`/movie/${id}?${LANG}&api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `/movie/${id}/credits?${LANG}&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `/movie/${id}/reviews?${LANG}&page=1&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n","export const SearchBar = ({ onSubmit }) => {\n  return (\n    <form className=\"searchForm\">\n      <input\n        className=\"searchForm-input\"\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movie\"\n      />\n\n      <button\n        type=\"submit\"\n        className=\"searchForm-button\"\n        onClick={evt => {\n          onSubmit(evt.target.previousElementSibling.value);\n          evt.preventDefault();\n        }}\n      >\n        Search\n      </button>\n    </form>\n  );\n};\n","import { Link, useLocation } from 'react-router-dom';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul className=\"movies-list\">\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`${movie.id}`} state={{ from: location }}>\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","export const Button = ({ nextPage }) => {\n  return (\n    <button onClick={nextPage} className=\"button\" type=\"button\">\n      Load More\n    </button>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesBySearch } from '../api';\nimport { SearchBar } from '../components/SearchBar';\nimport { MovieList } from '../components/MovieList';\nimport { Button } from '../components/Button';\nimport { Loader } from '../components/Loader';\nimport Notiflix from 'notiflix';\n\nexport default function MoviesPage() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const [showBtn, setShowBtn] = useState();\n  const [id, setId] = useState(null);\n\n  const [params, setParams] = useSearchParams('');\n  const query = params.get('query') ?? '';\n\n  useEffect(() => {\n    async function getMovie() {\n      if (query !== '') {\n        try {\n          setIsLoading(true);\n          const { results, total_pages } = await fetchMoviesBySearch(\n            query,\n            page\n          );\n          if (results.length === 0) {\n            Notiflix.Notify.failure(\n              `Oops, no movie with the title \"${query}\" was found.`\n            );\n          }\n          setShowBtn(page < Math.ceil(total_pages / 20));\n          // setMovies(prevState => [...prevState.concat(results)]);\n          setMovies(results);\n        } catch (error) {\n          Notiflix.Notify.failure(\n            'Oops, something went wrong, try reloading the page'\n          );\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    }\n    getMovie();\n  }, [query, page, id]);\n\n  const handleSubmit = newQuery => {\n    setParams({ query: newQuery });\n    setPage(1);\n    setMovies([]);\n    setId(Date.now());\n  };\n\n  const handleLoadMore = () => {\n    setPage(prevState => prevState + 1);\n  };\n\n  return (\n    <div>\n      <SearchBar onSubmit={handleSubmit} />\n\n      {movies.length > 0 && (\n        <>\n          <MovieList movies={movies} />\n        </>\n      )}\n      {isLoading && (\n        <>\n          <Loader />\n        </>\n      )}\n      {showBtn && (\n        <>\n          <Button nextPage={handleLoadMore} />\n        </>\n      )}\n    </div>\n  );\n}\n"],"names":["axios","defaults","baseURL","API_KEY","LANG","fetchMovies","async","get","concat","data","fetchMoviesBySearch","query","page","fetchMovieDetails","id","fetchCast","fetchReviews","SearchBar","_ref","onSubmit","_jsxs","className","children","_jsx","type","autoComplete","autoFocus","placeholder","onClick","evt","target","previousElementSibling","value","preventDefault","MovieList","movies","location","useLocation","map","movie","Link","to","state","from","title","Button","nextPage","MoviesPage","_params$get","setMovies","useState","isLoading","setIsLoading","setPage","showBtn","setShowBtn","setId","params","setParams","useSearchParams","useEffect","results","total_pages","length","Notiflix","failure","Math","ceil","error","getMovie","newQuery","Date","now","_Fragment","Loader","handleLoadMore","prevState"],"sourceRoot":""}