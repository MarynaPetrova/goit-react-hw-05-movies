{"version":3,"file":"static/js/53.b3377e95.chunk.js","mappings":"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","sources":["api.js","components/Arrow.jsx","components/MovieCard.jsx","pages/MovieDetailsPage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c4cadb3d157e55315d13da915983f2ee';\nconst LANG = 'language=en-US';\n\nexport const fetchMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchMoviesBySearch = async (query, page) => {\n  const response = await axios.get(\n    `/search/movie?query=${query}&${LANG}&page=${page}&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(`/movie/${id}?${LANG}&api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `/movie/${id}/credits?${LANG}&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `/movie/${id}/reviews?${LANG}&page=1&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n","export const Arrow = () => {\n  return (\n    <svg\n      className=\"card-arrow\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"18\"\n      height=\"18\"\n      viewBox=\"0 0 32 32\"\n    >\n      <title>arrow-left</title>\n      <path d=\"M12.586 27.414l-10-10c-0.781-0.781-0.781-2.047 0-2.828l10-10c0.781-0.781 2.047-0.781 2.828 0s0.781 2.047 0 2.828l-6.586 6.586h19.172c1.105 0 2 0.895 2 2s-0.895 2-2 2h-19.172l6.586 6.586c0.39 0.39 0.586 0.902 0.586 1.414s-0.195 1.024-0.586 1.414c-0.781 0.781-2.047 0.781-2.828 0z\"></path>\n    </svg>\n  );\n};\n","import { Link, useLocation } from 'react-router-dom';\nimport { useRef } from 'react';\nimport { Arrow } from './Arrow';\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/';\n\nexport const MovieCard = ({ movie }) => {\n  const location = useLocation();\n  const backLinkRef = useRef(location);\n\n  const { genres, overview, poster_path, release_date, title, vote_average } =\n    movie;\n\n  const score = () => {\n    return (vote_average * 10).toFixed(1);\n  };\n\n  const year = () => {\n    return release_date.split('-')[0];\n  };\n\n  return (\n    <div className=\"card-wrapper\">\n      <Link\n        className=\"card-back-arrow\"\n        to={backLinkRef.current.state?.from ?? '/'}\n      >\n        <Arrow />\n        Go back\n      </Link>\n      <div className=\"card-details-wrapper\">\n        {movie?.release_date && (\n          <>\n            <img\n              src={`${BASE_URL}w300${poster_path}`}\n              alt={`${title} movie poster`}\n            />\n            <div>\n              <h1>\n                {title} <span>({year()})</span>\n              </h1>\n              <p>User score: {score()}%</p>\n              <h2>Overview</h2>\n              <p>{overview}</p>\n              <h3>Genres</h3>\n              {!!genres && genres.length === 0 && (\n                <>\n                  <p>Unfortunately, there is no information about genres</p>\n                </>\n              )}\n              {!!genres && genres.length > 0 && (\n                <>\n                  <ul className=\"card-genres-list\">\n                    {genres.map(genre => {\n                      return <li key={genre.id}>{genre.name}</li>;\n                    })}\n                  </ul>\n                </>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useParams, Outlet, Link } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMovieDetails } from '../api';\nimport { MovieCard } from '../components/MovieCard';\nimport { Loader } from '../components/Loader';\nimport Notiflix from 'notiflix';\n\nexport default function MoviesDetailsPage() {\n  const params = useParams();\n\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function getMovieDetails() {\n      try {\n        setIsLoading(true);\n        const initialDetails = await fetchMovieDetails(params.movieId);\n        setMovie(initialDetails);\n      } catch (error) {\n        Notiflix.Notify.failure(\n          'Oops, something went wrong, try reloading the page'\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getMovieDetails();\n  }, [params.movieId]);\n\n  return (\n    <div>\n      {isLoading && (\n        <>\n          <Loader />\n        </>\n      )}\n      <MovieCard movie={movie} />\n      <div className=\"card-add-info\">\n        <h4>Additional information</h4>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n      </div>\n      <Outlet />\n    </div>\n  );\n}\n"],"names":["axios","defaults","baseURL","API_KEY","LANG","fetchMovies","async","get","concat","data","fetchMoviesBySearch","query","page","fetchMovieDetails","id","fetchCast","fetchReviews","Arrow","_jsxs","className","version","xmlns","width","height","viewBox","children","_jsx","d","MovieCard","_ref","_backLinkRef$current$","_backLinkRef$current$2","movie","location","useLocation","backLinkRef","useRef","genres","overview","poster_path","release_date","title","vote_average","Link","to","current","state","from","_Fragment","src","alt","split","toFixed","length","map","genre","name","MoviesDetailsPage","params","useParams","setMovie","useState","isLoading","setIsLoading","useEffect","initialDetails","movieId","error","Notiflix","failure","getMovieDetails","Loader","Outlet"],"sourceRoot":""}