{"version":3,"file":"static/js/631.2daa8cdd.chunk.js","mappings":"kMAEAA,EAAAA,EAAMC,SAASC,QAAU,+BACzB,MAAMC,EAAU,mCACVC,EAAO,iBAEAC,EAAcC,gBACFN,EAAAA,EAAMO,IAAI,+BAADC,OAAgCL,KAChDM,KAGLC,EAAsBJ,MAAOK,EAAOC,WACxBZ,EAAAA,EAAMO,IAAI,uBAADC,OACPG,EAAK,KAAAH,OAAIJ,EAAI,UAAAI,OAASI,EAAI,aAAAJ,OAAYL,KAE/CM,KAGLI,EAAoBP,gBACRN,EAAAA,EAAMO,IAAI,UAADC,OAAWM,EAAE,KAAAN,OAAIJ,EAAI,aAAAI,OAAYL,KACjDM,KAGLM,EAAYT,gBACAN,EAAAA,EAAMO,IAAI,UAADC,OACpBM,EAAE,aAAAN,OAAYJ,EAAI,aAAAI,OAAYL,KAE1BM,KAGLO,EAAeV,gBACHN,EAAAA,EAAMO,IAAI,UAADC,OACpBM,EAAE,aAAAN,OAAYJ,EAAI,oBAAAI,OAAmBL,KAEjCM,I,iHC5BlB,MAAMQ,EAAW,8BAEF,SAASC,IACtB,MAAMC,GAASC,EAAAA,EAAAA,OAERC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,CAAC,IAC3BC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GAoB3C,OAlBAG,EAAAA,EAAAA,YAAU,MACRpB,iBACE,IACEmB,GAAa,GACb,MAAM,KAAEJ,SAAeN,EAAAA,EAAAA,GAAUI,EAAOQ,SACxCL,EAAQD,EACV,CAAE,MAAOO,GACPC,IAAAA,OAAgBC,QACd,qDAEJ,CAAC,QACCL,GAAa,EACf,CACF,CAEAM,EAAS,GACR,CAACZ,EAAOQ,WAGTK,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGT,IACCU,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAF,UACEC,EAAAA,EAAAA,KAACE,EAAAA,EAAM,MAGM,IAAhBf,EAAKgB,SACJH,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAF,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,yDAGPC,EAAAA,EAAAA,KAAA,MAAII,UAAU,YAAWL,SACtBZ,EAAKgB,OAAS,IACbH,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAF,SACGZ,EAAKkB,KAAIC,IACR,MAAM,UAAEC,EAAS,GAAE3B,EAAE,KAAE4B,EAAI,aAAEC,GAAiBH,EAC9C,OACER,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACEU,IAAG,GAAApC,OAAKS,EAAQ,QAAAT,OAAOmC,GACvBE,IAAG,GAAArC,OAAKkC,EAAI,gBAEdR,EAAAA,EAAAA,KAAA,KAAAD,SAAIS,IACW,KAAdD,IACCP,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAF,UACED,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYQ,SARZ3B,EAWJ,UAQrB,C","sources":["api.js","pages/CastPage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c4cadb3d157e55315d13da915983f2ee';\nconst LANG = 'language=en-US';\n\nexport const fetchMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchMoviesBySearch = async (query, page) => {\n  const response = await axios.get(\n    `/search/movie?query=${query}&${LANG}&page=${page}&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(`/movie/${id}?${LANG}&api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `/movie/${id}/credits?${LANG}&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `/movie/${id}/reviews?${LANG}&page=1&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchCast } from '../api';\nimport { Loader } from '../components/Loader';\nimport Notiflix from 'notiflix';\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/';\n\nexport default function CastPage() {\n  const params = useParams();\n\n  const [cast, setCast] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function getCast() {\n      try {\n        setIsLoading(true);\n        const { cast } = await fetchCast(params.movieId);\n        setCast(cast);\n      } catch (error) {\n        Notiflix.Notify.failure(\n          'Oops, something went wrong, try reloading the page'\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getCast();\n  }, [params.movieId]);\n\n  return (\n    <div>\n      {isLoading && (\n        <>\n          <Loader />\n        </>\n      )}\n      {cast.length === 0 && (\n        <>\n          <p>Unfortunately, there is no information about cast</p>\n        </>\n      )}\n      <ul className=\"cast-list\">\n        {cast.length > 0 && (\n          <>\n            {cast.map(actor => {\n              const { character, id, name, profile_path } = actor;\n              return (\n                <li key={id}>\n                  <img\n                    src={`${BASE_URL}w200${profile_path}`}\n                    alt={`${name} portrait`}\n                  />\n                  <b>{name}</b>\n                  {character !== '' && (\n                    <>\n                      <p>Character: {character}</p>\n                    </>\n                  )}\n                </li>\n              );\n            })}\n          </>\n        )}\n      </ul>\n    </div>\n  );\n}\n"],"names":["axios","defaults","baseURL","API_KEY","LANG","fetchMovies","async","get","concat","data","fetchMoviesBySearch","query","page","fetchMovieDetails","id","fetchCast","fetchReviews","BASE_URL","CastPage","params","useParams","cast","setCast","useState","isLoading","setIsLoading","useEffect","movieId","error","Notiflix","failure","getCast","_jsxs","children","_jsx","_Fragment","Loader","length","className","map","actor","character","name","profile_path","src","alt"],"sourceRoot":""}