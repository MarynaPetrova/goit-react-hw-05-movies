{"version":3,"file":"static/js/642.16793646.chunk.js","mappings":"kMAEAA,EAAAA,EAAMC,SAASC,QAAU,+BACzB,MAAMC,EAAU,mCACVC,EAAO,iBAEAC,EAAcC,gBACFN,EAAAA,EAAMO,IAAI,+BAADC,OAAgCL,KAChDM,KAGLC,EAAsBJ,MAAOK,EAAOC,WACxBZ,EAAAA,EAAMO,IAAI,uBAADC,OACPG,EAAK,KAAAH,OAAIJ,EAAI,UAAAI,OAASI,EAAI,aAAAJ,OAAYL,KAE/CM,KAGLI,EAAoBP,gBACRN,EAAAA,EAAMO,IAAI,UAADC,OAAWM,EAAE,KAAAN,OAAIJ,EAAI,aAAAI,OAAYL,KACjDM,KAGLM,EAAYT,gBACAN,EAAAA,EAAMO,IAAI,UAADC,OACpBM,EAAE,aAAAN,OAAYJ,EAAI,aAAAI,OAAYL,KAE1BM,KAGLO,EAAeV,gBACHN,EAAAA,EAAMO,IAAI,UAADC,OACpBM,EAAE,aAAAN,OAAYJ,EAAI,oBAAAI,OAAmBL,KAEjCM,I,iHC5BH,SAASQ,IACtB,MAAMC,GAASC,EAAAA,EAAAA,OAERC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KAChCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GAoB3C,OAlBAG,EAAAA,EAAAA,YAAU,MACRnB,iBACE,IACEkB,GAAa,GACb,MAAM,QAAEE,SAAkBV,EAAAA,EAAAA,IAAaE,EAAOS,SAC9CN,EAAWK,EACb,CAAE,MAAOE,GACPC,IAAAA,OAAgBC,QACd,qDAEJ,CAAC,QACCN,GAAa,EACf,CACF,CAEAO,EAAY,GACX,CAACb,EAAOS,WAGTK,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGV,IACCW,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAF,UACEC,EAAAA,EAAAA,KAACE,EAAAA,EAAM,MAGS,IAAnBhB,EAAQiB,SACPH,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAF,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2CAGPC,EAAAA,EAAAA,KAAA,MAAAD,SACGb,EAAQiB,OAAS,IAChBH,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAF,SACGb,EAAQkB,KAAIC,IACX,MAAM,OAAEC,EAAM,GAAE1B,EAAE,QAAE2B,GAAYF,EAChC,OACEP,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACG,KACDC,EAAAA,EAAAA,KAAA,KAAAD,SAAIO,KACJN,EAAAA,EAAAA,KAAA,KAAAD,SAAIQ,MAHG3B,EAIJ,UAQrB,C","sources":["api.js","pages/ReviewsPage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c4cadb3d157e55315d13da915983f2ee';\nconst LANG = 'language=en-US';\n\nexport const fetchMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchMoviesBySearch = async (query, page) => {\n  const response = await axios.get(\n    `/search/movie?query=${query}&${LANG}&page=${page}&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(`/movie/${id}?${LANG}&api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `/movie/${id}/credits?${LANG}&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `/movie/${id}/reviews?${LANG}&page=1&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchReviews } from '../api';\nimport { Loader } from '../components/Loader';\nimport Notiflix from 'notiflix';\n\nexport default function ReviewsPage() {\n  const params = useParams();\n\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function getReviews() {\n      try {\n        setIsLoading(true);\n        const { results } = await fetchReviews(params.movieId);\n        setReviews(results);\n      } catch (error) {\n        Notiflix.Notify.failure(\n          'Oops, something went wrong, try reloading the page'\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getReviews();\n  }, [params.movieId]);\n\n  return (\n    <div>\n      {isLoading && (\n        <>\n          <Loader />\n        </>\n      )}\n      {reviews.length === 0 && (\n        <>\n          <p>Unfortunately, there are no reviews</p>\n        </>\n      )}\n      <ul>\n        {reviews.length > 0 && (\n          <>\n            {reviews.map(review => {\n              const { author, id, content } = review;\n              return (\n                <li key={id}>\n                  {' '}\n                  <b>{author}</b>\n                  <p>{content}</p>\n                </li>\n              );\n            })}\n          </>\n        )}\n      </ul>\n    </div>\n  );\n}\n"],"names":["axios","defaults","baseURL","API_KEY","LANG","fetchMovies","async","get","concat","data","fetchMoviesBySearch","query","page","fetchMovieDetails","id","fetchCast","fetchReviews","ReviewsPage","params","useParams","reviews","setReviews","useState","isLoading","setIsLoading","useEffect","results","movieId","error","Notiflix","failure","getReviews","_jsxs","children","_jsx","_Fragment","Loader","length","map","review","author","content"],"sourceRoot":""}